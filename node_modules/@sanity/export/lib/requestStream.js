"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var simpleGet = require('simple-get');

var MAX_RETRIES = 5; // Just a promisified simpleGet

function getStream(options) {
  return new Promise((resolve, reject) => {
    simpleGet(options, (err, res) => err ? reject(err) : resolve(res));
  });
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
/* eslint-disable no-await-in-loop, max-depth */


module.exports =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (options) {
    var error;

    for (var i = 0; i < MAX_RETRIES; i++) {
      try {
        return yield getStream(options);
      } catch (err) {
        error = err;

        if (err.statusCode && err.statusCode < 500) {
          break;
        }

        yield delay(1500);
      }
    }

    throw error;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();